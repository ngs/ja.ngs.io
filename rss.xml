<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Atsushi Nagase</title>
    <atom:link href="https://ja.ngs.io/rss.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="https://ja.ngs.io/feed.xml" type="application/atom+xml"/>
    <language>ja</language>
    <description>プログラミング、ガジェット、電子工作、ロードバイク、ランニング、旅行など、趣味や仕事のことを書き綴るブログ。</description>
    <link>https://ja.ngs.io/</link>
    <lastBuildDate>Fri, 08 Feb 2019 12:00:00 -0000</lastBuildDate>
    <item>
      <title>Go Release Binary GitHub Action</title>
      <link>https://ja.ngs.io/2019/02/08/go-release-action/</link>
      <guid>https://ja.ngs.io/2019/02/08/go-release-action/</guid>
      <pubDate>Fri, 08 Feb 2019 12:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;GitHub Marketplace に Go Release Binary Action を公開しました。&lt;/p&gt;

&lt;p&gt;Go Release Binary Action on GitHub Marketplace&lt;/p&gt;

&lt;p&gt;この GitHub Action は Go 言語で実装されたコマンドラインツールのバイナリを GitHub のリリースが作成されたら、自動的にビルドを行い、リリース資材に tarball を追加します。&lt;/p&gt;&lt;h2&gt;GitHub Actions&lt;/h2&gt;

&lt;p&gt;GitHub Actions は 2019/02/08 時点では限定公開ベータとして提供されており、以下のページより Beta にサインアップすることで利用できます。&lt;/p&gt;

&lt;p&gt;https://github.com/features/actions&lt;/p&gt;

&lt;h2&gt;利用例&lt;/h2&gt;&lt;p&gt;ngs/aws1pif@v1.0.0&lt;/p&gt;

&lt;p&gt;以下のように .workflow ファイルを設置し、GitHub の Releases 機能を使って新しく Release を作成すると、対象のコミットのビルド成果物を自動的にビルドし、リリース資材として追加します。&lt;/p&gt;
  # .github/main.workflow

workflow "Build" {
  on = "release"
  resolves = [
    "release darwin/amd64",
    "release windows/amd64",
    "release linux/amd64",
  ]
}

action "release darwin/amd64" {
  uses = "ngs/go-release.action@v1.0.0"
  env = {
    GOOS = "darwin"
    GOARCH = "amd64"
  }
  secrets = ["GITHUB_TOKEN"]
}

action "release windows/amd64" {
  uses = "ngs/go-release.action@v1.0.0"
  env = {
    GOOS = "windows"
    GOARCH = "amd64"
  }
  secrets = ["GITHUB_TOKEN"]
}

action "release linux/amd64" {
  uses = "ngs/go-release.action@v1.0.0"
  env = {
    GOOS = "linux"
    GOARCH = "amd64"
  }
  secrets = ["GITHUB_TOKEN"]
}
  </description>
    </item>
    <item>
      <title>AWS の credentials.csv を 1Password に取り込む CLI ツール</title>
      <link>https://ja.ngs.io/2019/02/07/aws1pif/</link>
      <guid>https://ja.ngs.io/2019/02/07/aws1pif/</guid>
      <pubDate>Thu, 07 Feb 2019 12:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;AWS の credentials.csv を 1Password の .1pif ファイルフォーマットとして出力するコマンドラインツールを公開しました。&lt;/p&gt;

&lt;p&gt;ngs/aws1pif&lt;/p&gt;&lt;h2&gt;インストール方法&lt;/h2&gt;

&lt;p&gt;Homebrew か go install コマンドを使ってインストールします。&lt;/p&gt;
  brew install ngs/formulae/aws1pif
  
&lt;p&gt;もしくは&lt;/p&gt;
  go install github.com/ngs/aws1pif
  
&lt;h2&gt;利用方法&lt;/h2&gt;

&lt;p&gt;aws1pif は標準出力として取り込んだ CSV を .1pif の JSON フォーマットで標準出力します。&lt;/p&gt;
  cat ~/Downloads/credentials.csv | aws1pif &amp;gt; aws.1pif
  
&lt;p&gt;保存された .1pif ファイルをダブルクリックなどで開くと、1Password が起動し、以下のように取り込みの確認ダイアログが出現します。&lt;/p&gt;&lt;p&gt;今の所、複数の Credential を取り込む機能はありません。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>instance0 始動</title>
      <link>https://ja.ngs.io/2019/02/01/instance0/</link>
      <guid>https://ja.ngs.io/2019/02/01/instance0/</guid>
      <pubDate>Thu, 31 Jan 2019 15:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;キャリアを通じて、サービス開発を共にしてきた システムアーキテクチャ・GUI デザイン・品質保証・ソフトウェア開発 のプロフェッショナルである仲間たちと5名で、instance0, inc. / インスタンスゼロ株式会社 を立ち上げました。&lt;/p&gt;

&lt;p&gt;ins0.jp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;システムアーキテクト 大澤 勇気
&lt;/li&gt;&lt;li&gt;UI デザイナー Carlos Liu
&lt;/li&gt;&lt;li&gt;QA エンジニア・ゼネラルマネージャー 田中 学二
&lt;/li&gt;&lt;li&gt;ソフトウェア開発者 佐藤 信吾
&lt;/li&gt;&lt;li&gt;ソフトウェア開発者・代表取締役社長 長瀨 敦史
&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;モチベーション&lt;/h2&gt;

&lt;p&gt;複数の企業・プロジェクトに、技術統括や顧問として関わる中で、システムアーキテクチャと品質保証、プロジェクトマネージメントの課題に直面することが多く、彼らとチームになって、それらを解決してきました。&lt;/p&gt;

&lt;p&gt;いくつかの現場をともした経験から、これらの課題は、一つの法人として各社と関わらせていただき、状況に応じて、自分たちのリソースを配分し、適材適所で課題解決に取り組むことで、顧客と我々双方のコストを効率化できると考え、設立に至りました。&lt;/p&gt;

&lt;h2&gt;今後の活動&lt;/h2&gt;

&lt;p&gt;当面、外部からの資金調達は行わない方針で運営します。&lt;/p&gt;

&lt;p&gt;顧客となる企業の技術組織、ワークフロー、アーキテクチャなどの設計・開発支援を行い、いずれは自走できるようにサポートさせていただきます。&lt;/p&gt;

&lt;p&gt;それと同時に、自らも継続的に新しいサービスを企画・開発し、仮説検証します。&lt;/p&gt;

&lt;p&gt;顧客・自社に関わらず、0番目のインスタンスを生産し続けていきます。&lt;/p&gt;

&lt;h2&gt;今後の人員&lt;/h2&gt;

&lt;p&gt;自分も含め、instance0 のメンバーは皆、複数の現場で複数の役割があります。&lt;/p&gt;

&lt;p&gt;法人という小さな枠で技術や知識を閉じ込めるのではなく、複数の環境を行ったり来たりすることで、関わるサービスの成長に、自分たちの専門性で寄与できれば幸いです。&lt;/p&gt;

&lt;p&gt;メンバーとして名前を出して活動しているのは、創業者5名ですが、すでに複数のパートナー企業・個人とプロジェクトを推進させていただいています。&lt;/p&gt;

&lt;p&gt;これからも、専門性を持った、ものづくりのパートナーに出会う機会を常に求めていきます。&lt;/p&gt;

&lt;p&gt;もし、われこそは、(とまでは言わないが、ちょっと興味あるぐらいでも) という方がいらっしゃいましたら、パートナー応募フォーム か 連絡先 よりご連絡ください。&lt;/p&gt;

&lt;p&gt;また instance0, inc. でアップデートがありましたら、こちらのブログでお知らせしていきます。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CircleCI Orbs を使った iOS アプリの CI/CD 導入 #circlecijp</title>
      <link>https://ja.ngs.io/2019/01/30/circleci/</link>
      <guid>https://ja.ngs.io/2019/01/30/circleci/</guid>
      <pubDate>Wed, 30 Jan 2019 10:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>

&lt;p&gt;2019/1/30 渋谷ヒカリエの DeNA さんのセミナールームで開催された 第1回CircleCI ユーザーコミュニティミートアップ で、先月公開した iOS アプリ開発のための Orbs について発表してきました。&lt;/p&gt;&lt;p&gt;スライド後半で SSH トンネル + VNC を使って画面をみながらデバッグする方法も共有しました。&lt;/p&gt;

&lt;p&gt;是非、参考にしていただければと思います。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>2018年所感</title>
      <link>https://ja.ngs.io/2018/12/31/shokan2018/</link>
      <guid>https://ja.ngs.io/2018/12/31/shokan2018/</guid>
      <pubDate>Sun, 30 Dec 2018 15:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;今年は、母方の祖母が住む、尾道で家族と大晦日を迎えています。&lt;/p&gt;

&lt;p&gt;例年 にならい、2018年の所感と2019年に注力することなどを書いていこうと思います。&lt;/p&gt;&lt;h2&gt;仕事・技術&lt;/h2&gt;

&lt;p&gt;初旬は、ずいぶん前のことの様に感じますが、昨年入社した CAMPFIRE でシステムリプレイスの実装、金融事業での監査対応、ISMS 取得担当として活動していました。&lt;/p&gt;

&lt;p&gt;去年注力してきた業務が落ち着き、メインのプロダクト開発を離れ、時間ができたので、OSS で公開しているアプリや、ライブラリのメンテナンス、ネットワーキングに時間を使っていました。&lt;/p&gt;

&lt;p&gt;そして、夏頃から、同時に複数の面白いお声がけをいただき、その中のいくつかのプロジェクトが現在も推進中です。&lt;/p&gt;

&lt;p&gt;まだ、いずれも、対外的に発表できる段階ではないので、良き頃合いに、お伝えしていこうと思います。&lt;/p&gt;

&lt;p&gt;個人で開発しているアプリやライブラリについては、引き続き、年 1, 2個ぐらいは、新しいものをリリースするなり、メジャーアップデートをしていこうと思います。&lt;/p&gt;

&lt;h2&gt;旅行・釣り&lt;/h2&gt;&lt;p&gt;今まで、防波堤や船など、主に海に友人と連れ立って釣行することが多かったのですが、今年はフライフィッシングに入門し、毛鉤を巻いたり、一人で沢へ釣行をしました。&lt;/p&gt;

&lt;p&gt;まだまだ思うようにキャスティングができず、然るべき毛鉤の選択もできていないと思うので、精進します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;02/10-11 勝浦つるんつるん温泉
&lt;/li&gt;&lt;li&gt;04/14-15 たきび合宿 at 伊東温泉 山喜旅館
&lt;/li&gt;&lt;li&gt;05/03-06 親戚宅 @ 能登
&lt;/li&gt;&lt;li&gt;05/20 千葉県勝山港
&lt;/li&gt;&lt;li&gt;06/09-10 宮原オートキャンプ場
&lt;/li&gt;&lt;li&gt;07/14-16 千曲源流金峰ふれあいの森
&lt;/li&gt;&lt;li&gt;09/15-16 養沢毛鉤専用釣場 + 大岳キャンプ場
&lt;/li&gt;&lt;li&gt;10/27-28 シャロムの森 + 黒坂石バンガローテント村
&lt;/li&gt;&lt;li&gt;11/10 養沢毛鉤専用釣場
&lt;/li&gt;&lt;li&gt;11/23-25 田貫湖キャンプ場
&lt;/li&gt;&lt;li&gt;12/01-02 養沢毛鉤専用釣場 + 大岳キャンプ場
&lt;/li&gt;&lt;/ul&gt;

&lt;h2&gt;音楽&lt;/h2&gt;&lt;p&gt;9月後半から3週続けてフェスに参加するなど、積極的に音楽を消費できていたと思います。&lt;/p&gt;

&lt;p&gt;2019年もサボらず消費活動を行います。深夜営業のクラブとワンマンライブへの参加が少なかったので、来年はもう少し足を運びたい所存です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;01/06 SHELTER - Timmy Regisford JAPAN TOUR 2017-2018 at Contact Tokyo
&lt;/li&gt;&lt;li&gt;03/30 くるりライブツアー 「線」at Zepp Tokyo
&lt;/li&gt;&lt;li&gt;05/18 Chaos at Contact Tokyo
&lt;/li&gt;&lt;li&gt;06/02-03 Taicoclub at こだまの森
&lt;/li&gt;&lt;li&gt;09/23 京都音楽博覧会 at 梅小路公園
&lt;/li&gt;&lt;li&gt;09/29 CAMP Off-Tone at マウントピア黒平
&lt;/li&gt;&lt;li&gt;10/06-07 朝霧 JAM at 富士山麓 朝霧アリーナ
&lt;/li&gt;&lt;li&gt;11/02-03 MUTEK.JP at 日本科学未来館
&lt;/li&gt;&lt;li&gt;11/14 mabanua tour 2018 - Blurred at 渋谷 WWW X
&lt;/li&gt;&lt;li&gt;11/18 MASTERS AT WORK in JAPAN at ageha Studio Coast
&lt;/li&gt;&lt;/ul&gt;

&lt;h2&gt;健康&lt;/h2&gt;

&lt;p&gt;2018年の前半は、定時で CAMPFIRE に出社しており、ランニングで渋谷まで行き、ジムでシャワーを浴びてオフィスへ向かう生活をしていたのですが、リモート中心に切り替え、複数の職場を行き来するようになってからは、運動を習慣化できていませんでした。&lt;/p&gt;

&lt;p&gt;前述の通り、複数のプロジェクトが同時に走っており、生活習慣が不安定な日々を過ごしています。&lt;/p&gt;

&lt;p&gt;暖かくなるまでには、自分のキャパシティを考慮し、自分の担当業務を整理して、規則正しく、運動もスケジュールに含んだ生活に戻したいと思います。&lt;/p&gt;

&lt;h2&gt;家族&lt;/h2&gt;&lt;p&gt;長女が小学校5年生、長男が2年生、次女が幼稚園年少になりました。&lt;/p&gt;

&lt;p&gt;長女がプログラミング教室に通うようになり、まだ付き添いはしているものの、家から電車に乗って渋谷の教室まで自分で移動できるほどになり、コンピュータを使いこなすようになり、、日々成長の速さに驚いています。&lt;/p&gt;

&lt;p&gt;年々、自分自身と、於かれている環境の変化のスピードが早くなっており、年始では想像もつかなかった状況に年末になっています。&lt;/p&gt;

&lt;p&gt;“今年一年はこのように過ごす” みたいなことを断言し難くなっていますが、引き続き、自分の趣味の音楽や旅行に家族を巻き込んで、一緒に過ごす時間を作っていきたいと思います。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>macOS 環境のための CircleCI Orbs を公開しました</title>
      <link>https://ja.ngs.io/2018/12/25/circleci-orbs/</link>
      <guid>https://ja.ngs.io/2018/12/25/circleci-orbs/</guid>
      <pubDate>Mon, 24 Dec 2018 15:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;この記事 CircleCI Advent Calendar 2018 の25日目の投稿です。&lt;/p&gt;

&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;CircleCI での iOS アプリの開発に利用していた、設定を汎用化し、CircleCI Orbs Registry に公開した、以下の Orbs の使い方と、開発のモチベーションについて記載します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngs/carthage
&lt;/li&gt;&lt;li&gt;ngs/fastlane
&lt;/li&gt;&lt;li&gt;ngs/swiftlint
&lt;/li&gt;&lt;li&gt;ngs/danger
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;これらの Orbs のソースコードは、全て以下のリポジトリで管理しています。&lt;/p&gt;

&lt;p&gt;ngs/circleci-orbs on GitHub&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;モチベーション&lt;/h2&gt;

&lt;p&gt;2014年より、オープンソースで開発している iPhone, iPad, Apple Watch 向け CircleCI クライアント CI2Go は、もちろん、CircleCI の macOS 環境を利用して 継続的インテグレーション・デリバリー を行なっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngs/ci2go on CircleCI
&lt;/li&gt;&lt;li&gt;ngs/ci2go on GitHub
&lt;/li&gt;&lt;li&gt;App Store
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;バージョン 1 の時代は、CircleCI 1.0 でのビルド環境を使い、fastlane などの周辺ツールも、今ほど機能が豊富ではなかったので、色々試行錯誤してきました。&lt;/p&gt;

&lt;p&gt;ref: iOS アプリの継続ビルドを CircleCI に変更した&lt;/p&gt;

&lt;p&gt;2017 年 に CircleCI 2.0 が発表され、同年11月 macOS サポートも開始しました。&lt;/p&gt;

&lt;p&gt;しばらく iOS 開発から離れた仕事をしていたので、指を加えて見ているだけでしたが、今年、しばらくメンテナンスが止まっていた CI2Go の CocoaPods での依存解決, Realm (オフラインサポート) を廃止し、バージョン 2.0 として Swift 4, Carthage を使い再構築を行いました。&lt;/p&gt;

&lt;p&gt;ref: CI2Go バージョン 2&lt;/p&gt;

&lt;p&gt;その当時の設定ファイルが、以下のようなものです。&lt;/p&gt;

&lt;p&gt;.circleci/config.yml@v2.0.0&lt;/p&gt;

&lt;p&gt;Workflows を採用することで、ビルドプロセスの見通しがよくなり、fastlane の進化により、以前のような、証明書関連や、依存解決に関わるヤクの毛刈りはほとんどなくなりました。&lt;/p&gt;

&lt;p&gt;以降、いくつかのプロジェクトで、この CI2Go の CircleCI 設定をコピーして、他のプロジェクトで活用してきました。&lt;/p&gt;

&lt;p&gt;今年、11月に CircleCI Orbs が、一般に利用可能になったため、これらの設定を汎用化し、CircleCI Orbs Registry に公開しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngs/carthage
&lt;/li&gt;&lt;li&gt;ngs/fastlane
&lt;/li&gt;&lt;li&gt;ngs/swiftlint
&lt;/li&gt;&lt;li&gt;ngs/danger
&lt;/li&gt;&lt;/ul&gt;

&lt;h2&gt;利用方法&lt;/h2&gt;

&lt;p&gt;ngs の名前空間で公開しているこれらの Orb は認証を得ていない、サードパーティですので、CircleCI 画面左側ナビゲーション &amp;gt; Settings &amp;gt; Security (https://circleci.com/gh/organizations/{orgname}/settings#security) 
より、一つ目のラジオボタン Yes, allow all members of my organization to publish dev orbs... を選択してください。&lt;/p&gt;

&lt;p&gt;また、プロジェクト設定 &amp;gt; Build Settings &amp;gt; Advanced Settings の Enable build processing (preview) https://circleci.com/gh/{orgname}/{repo}/edit#advanced-settings がオフになっている場合は、そちらも On にしてください。&lt;/p&gt;

 Carthage 

&lt;p&gt;ngs/carthage&lt;/p&gt;

&lt;p&gt;Carthage の依存解決を行います。&lt;/p&gt;

&lt;p&gt;デプロイメントターゲットを指定することにより、参照先とプロジェクトのデプロイメントターゲットの乖離による App Store Connect アップロード時のエラーを防ぎます。&lt;/p&gt;

&lt;p&gt;ref: Xcode 10 GM - Invalid Binary Architecture when submitting to App Store Connect?&lt;/p&gt;
  version: 2.1

orbs:
  carthage: ngs/carthage@0.0.2

jobs:
  main:
    macos:
      xcode: 10.1.0
    steps:
      - carthage/setup:
          platforms: iOS,watchOS
          watch_os: '5.0'
          iphone_os: '11.0'
          cache_key_prefix: 2-carthage-
      - ...

workflows:
  main:
    jobs:
      - main
  
 fastlane 

&lt;p&gt;ngs/fastlane&lt;/p&gt;

&lt;p&gt;fastlane コマンドと、依存する RubyGems の解決を行う Bundler コマンドを実行する、コマンド、実行に求められる環境変数が備わった Executor、単体の lane を実行するジョブを提供します。&lt;/p&gt;
  version: 2.1

orbs:
  fastlane: ngs/fastlane@0.0.2

jobs:
  build_and_deploy:
    executor: fastlane/macos
    steps:
      - fastlane/bundle-install
      - fastlane/lane:
          command: run match --readonly --type adhoc
      - fastlane/lane:
          command: my_app_build
      - fastlane/lane:
          command: my_app_deploy
      - ...

workflows:
  build_and_deploy:
    jobs:
      - build_and_deploy
      - fastlane/lane:
          command: my_single_lane
  
 SwiftLint, Danger 

&lt;p&gt;Danger と SwiftLint を実行するジョブを提供します。&lt;/p&gt;
  version: 2.1

orbs:
  swiftlint: ngs/swiftlint@0.0.1
  danger: ngs/danger@0.0.1

workflows:
  build_and_deploy:
    jobs:
      - swiftlint/run
      - danger/run
  
&lt;h2&gt;macOS 関連以外の Orbs&lt;/h2&gt;

&lt;p&gt;macOS 関連以外の業務に関わる Orb も公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngs/clamav : コンテナ内のファイルに対して ClamAV を使って、マルウェアが含まれていないか検査します
&lt;/li&gt;&lt;li&gt;ngs/dotnet : .NET Core 向けに開発されたプロジェクトを .NET CLI を使い操作します。
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;今回紹介した、macOS 向けのものも含めて、公開している Orbs は、まだ様々なユースケースに対応できているとは言えません。&lt;/p&gt;

&lt;p&gt;是非、活用いただき、GitHub Issues でフィードバックをいただけたらと思います。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CI2Go Today ウィジェット対応</title>
      <link>https://ja.ngs.io/2018/07/08/ci2go/</link>
      <guid>https://ja.ngs.io/2018/07/08/ci2go/</guid>
      <pubDate>Sun, 08 Jul 2018 00:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;iPhone と iPad 向け CircleCI クライアント  CI2Go バージョン 2.1.0 を公開しました。&lt;/p&gt;&lt;p&gt;バージョン 2.1.0 は以下の更新を含みます:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Today ウィジェット
&lt;/li&gt;&lt;li&gt;SSH 接続
&lt;/li&gt;&lt;li&gt;端末上の成果物を削除
&lt;/li&gt;&lt;li&gt;URL でアプリを開く
&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Today ウィジェット&lt;/h2&gt;&lt;p&gt;CI2Go Today ウィジェットを Today ビューに追加できます。&lt;/p&gt;

&lt;p&gt;選択したプロジェクト、ブランチ、または全てのフォローしているプロジェクトの直近5件のビルドが表示されます。&lt;/p&gt;

&lt;h2&gt;SSH 接続&lt;/h2&gt;&lt;p&gt;SSH 接続が有効なビルドの実行中で Panic の Prompt のような ssh:// URI スキームに対応しているクライアントがインストールされている場合、SSH セクションが表示されるようになりました。&lt;/p&gt;

&lt;p&gt;コンテナの行を選択することで、SSH クライアントを起動します。&lt;/p&gt;

&lt;h2&gt;端末上の成果物を削除&lt;/h2&gt;&lt;p&gt;テーブルの行を左にスワイプして出てくるゴミ箱アイコンから、ダウンロード済のビルド成果物を削除できます。&lt;/p&gt;

&lt;h2&gt;URL でアプリを開く&lt;/h2&gt;

&lt;p&gt;chttps://, ci2go://, ci2go+https:// の URI スキームに対応しました。&lt;/p&gt;

&lt;p&gt;CircleCI のビルド URL のプロトコル部分を以下のように変更することで、CI2Go を起動できます。&lt;/p&gt;

&lt;p&gt;https://circleci.com/gh/circleci/frontend/3439 から ci2go://circleci.com/gh/circleci/frontend/3439&lt;/p&gt;

&lt;p&gt;不具合などありましたら、 イシュー を起票いただけると幸いです。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Coveralls fastlane プラグイン</title>
      <link>https://ja.ngs.io/2018/07/07/fastlane-plugin-coveralls/</link>
      <guid>https://ja.ngs.io/2018/07/07/fastlane-plugin-coveralls/</guid>
      <pubDate>Sat, 07 Jul 2018 14:59:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;Xcode のテストカバレッジを Coveralls へアップロードする fastlane&amp;nbsp;プラグイン と、その依存先で、単体でもコマンドラインツールとして利用できる xccoveralls を公開しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngs/fastlane-plugin-coveralls
&lt;/li&gt;&lt;li&gt;ngs/xccoveralls
&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;使ってみる&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行して&lt;/p&gt;
  fastlane add_plugin coveralls
  
&lt;p&gt;Fastfile に以下の行を追加&lt;/p&gt;
  lane :send_coveralls do
  coveralls
end
  
&lt;p&gt;テストターゲットの Code Coverage　のチェックボックスをオンに設定し&lt;/p&gt;&lt;p&gt;fastlane コマンドよりコードカバレッジを送信できます&lt;/p&gt;
  export XCCOVERALLS_REPO_TOKEN=... # Coveralls.io から自分のものを取ってくる
bundle exec fastlane send_coveralls
  
&lt;p&gt;例として CI2Go のカバレッジを Coveralls で、その設定をFastfile で確認いただけます。&lt;/p&gt;

&lt;h2&gt;開発のきっかけ&lt;/h2&gt;

&lt;p&gt;fastlane のアクション として組み込まれている Xcov を利用しようとしました。&lt;/p&gt;

&lt;p&gt;しかし、Xcov はカバレッジの要約のみ保持している .xccovreport または .xccoverage の情報を取得して送信しているため、カバー行の情報まで送信しません。&lt;/p&gt;

&lt;p&gt;そこで、Xcode 9.3 より提供されている xcrun xccov を利用して、新たにこのツールを実装しました。&lt;/p&gt;
  # ファイルの一覧を取得する
$ xcrun xccov view --file-list DerivedData/Logs/Build/*.xccovarchive

# 特定のファイルのカバレッジを取得する
$ xcrun xccov view --file /Users/ngs/src/CI2Go/AppDelegate.swift \
    DerivedData/Logs/Build/*.xccovarchive
  
&lt;p&gt;参照: xccov: Xcode Code Coverage Report for Humans&lt;/p&gt;

&lt;p&gt;もし何か問題がありましたら イシュー を起票いだたけると嬉しいです。&lt;/p&gt;

&lt;p&gt;では XCTesting を楽しんでください &lt;/p&gt;
</description>
    </item>
    <item>
      <title>CI2Go バージョン 2</title>
      <link>https://ja.ngs.io/2018/07/02/ci2go-v2/</link>
      <guid>https://ja.ngs.io/2018/07/02/ci2go-v2/</guid>
      <pubDate>Mon, 02 Jul 2018 00:20:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;iPhone と iPad 向け CircleCI クライアント  CI2Go のメジャーバージョンアップを行いました。&lt;/p&gt;&lt;p&gt;バージョン 2 は以下のアップデートを含んでいます。&lt;/p&gt;&lt;h2&gt;iPhone X に最適化&lt;/h2&gt;&lt;p&gt;iPhone X の 5.8 インチのスクリーンに最適化しました。&lt;/p&gt;

&lt;h2&gt;シングルサインオン&lt;/h2&gt;&lt;p&gt;API トークンを CircleCI の画面からコピーしてくる代わりに、シングルサインオンを利用するよう、認証フローを刷新しました。&lt;/p&gt;

&lt;p&gt;内部で自動的に 個人 API トークン を作成します。&lt;/p&gt;

&lt;h2&gt;ビルド成果物 ブラウザー&lt;/h2&gt;&lt;p&gt;ビルド成果物 ブラウザー を再構築しました。&lt;/p&gt;

&lt;p&gt;全てのファイルのダウンロードを待つことなく、素早く成果物を確認できます。&lt;/p&gt;

&lt;p&gt;必要な時にだけ、ファイルのダウンロードを開始し、画面を離れてもバックグラウンドでダウンロードを続けます。&lt;/p&gt;

&lt;h2&gt;Apple Watch コンプリケーション&lt;/h2&gt;&lt;p&gt;Apple Watch コンプリケーション の提供を開始しました。&lt;/p&gt;

&lt;p&gt;時計の文字盤でビルドのステータスを確認できます。&lt;/p&gt;

&lt;p&gt;watchOS API の制約により、リアルタイムな情報の更新は行いません。&lt;/p&gt;

&lt;h2&gt;パフォーマンス改善&lt;/h2&gt;

&lt;p&gt;このバージョンで、全ての実装を一からみなおしました。&lt;/p&gt;

&lt;p&gt;オフラインデータの扱いを行わなくなった代わりに、より素早い挙動を行いようになりました。&lt;/p&gt;

&lt;p&gt;不具合などありましたら、 イシュー を起票いただけると幸いです。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Slack のコマンドを使って TeamSpirit に打刻する</title>
      <link>https://ja.ngs.io/2018/02/14/ts-dakoku/</link>
      <guid>https://ja.ngs.io/2018/02/14/ts-dakoku/</guid>
      <pubDate>Wed, 14 Feb 2018 11:00:00 -0000</pubDate>
      <author>a@ngs.io (長瀬 敦史)</author>
      <description>&lt;p&gt;CAMPFIRE の従業員は、勤怠・経費・工数などの管理を TeamSpirit を使って行っています。&lt;/p&gt;

&lt;p&gt;勤怠情報は SalesForce Force.com 上にインストールされた TeamSpirit の勤怠管理画面などから行います。&lt;/p&gt;

&lt;p&gt;ref: 【利用環境・機能】知っていると得をする！チームスピリットと Force.com との関係を理解しよう！&lt;/p&gt;

&lt;p&gt;勤怠情報は、毎日リアルタイムに付けないと、月末にまとめて、過去を振り返って記入する必要があり、従業員に負荷がかかっています。&lt;/p&gt;

&lt;p&gt;この打刻作業を毎日習慣づけて、負荷なく行うため、いつも使っている Slack のコマンドで行える、Slack のアプリケーションを作成しました。&lt;/p&gt;

&lt;p&gt;ソースコードは GitHub 上で公開しています。&lt;/p&gt;

&lt;p&gt;TeamSpirit と Slack を利用している企業であれば、Heroku などを使ってアプリケーションを立ち上げ、全ての従業員が利用できます。&lt;/p&gt;

&lt;p&gt;ref: ngs/ts-dakoku&lt;/p&gt;

&lt;p&gt;以下に導入手順を記載します。&lt;/p&gt;&lt;h2&gt;手順&lt;/h2&gt;

 
&lt;li&gt;TeamSpirit が動く Force.com 環境から Sandbox 環境を作成する
&lt;/li&gt;&lt;li&gt;Sandbox に Apex のソースコードを追加する
&lt;/li&gt;&lt;li&gt;Sandbox より、送信変更セットを使い、Apex コードを本番環境にアップロードする
&lt;/li&gt;&lt;li&gt;TeamSpirit 本番環境で 接続アプリケーション を作成する
&lt;/li&gt;&lt;li&gt;Slack でアプリケーションを作成する
&lt;/li&gt;&lt;li&gt;アプリケーションを Heroku 上にデプロイする
&lt;/li&gt; 

&lt;h2&gt;1. Force.com Sandbox 環境を作成する&lt;/h2&gt;

&lt;p&gt;TeamSpirit は外部に公開されている API がありません。&lt;/p&gt;

&lt;p&gt;そこで、Force.com に Apex REST のエンドポイントを作成します。&lt;/p&gt;

&lt;p&gt;ref: Creating REST APIs using Apex REST&lt;/p&gt;

&lt;p&gt;TeamSpirit が動いている本番環境の Force.com では、Apex クラス、トリガーなどの開発資材を直接作成することはできません。&lt;/p&gt;

&lt;p&gt;[設定] 画面より、 リリース &amp;gt; Sandbox 画面を表示し、 新規 Sandbox ボタンをクリックして、Sandbox 環境を作ります。&lt;/p&gt;&lt;p&gt;名前 と 説明 欄には &lt;strong&gt;任意の内容&lt;/strong&gt; を入力し、 Sandbox ライセンス は &lt;strong&gt;Developer&lt;/strong&gt; を選択します。&lt;/p&gt;

&lt;p&gt;次にでてくる、 Sandbox オプション の Apex クラス は空欄のまま、 作成ボタン をクリックします。&lt;/p&gt;

&lt;p&gt;しばらくすると、Sandbox 環境の使用準備が整った旨のメールが届きます。&lt;/p&gt;

&lt;p&gt;メールに記載されているログイン URL を開き、ログインユーザ名の欄に、TeamSpirit のログインメールアドレスの末尾に小文字で Sandbox 環境名、パスワードは TeamSpirit と同じものを入力し、ログインします。&lt;/p&gt;

&lt;h2&gt;2. Sandbox に Apex のソースコードを追加する&lt;/h2&gt;&lt;p&gt;Sandbox 環境画面右上にある、ログインユーザーの名前をクリックし、ナビゲーションを展開、 開発コンソール を開きます。&lt;/p&gt;&lt;p&gt;管理コンソール左上メニューバーから File &amp;gt; New &amp;gt; Apex Class を選択し、 TSTimeTableAPIController, TSTimeTableAPIControllerTest という名前の Apex クラスを作成します。&lt;/p&gt;

&lt;p&gt;コードエディター上に、それぞれリポジトリからコピーしたソースコードを貼り付け、保存します。&lt;/p&gt;

&lt;p&gt;ts-dakoku/apex/src/classes at master · ngs/ts-dakoku&lt;/p&gt;

&lt;p&gt;リポジトリ内の apex ディレクトリは Force.com IDE のプロジェクトとしても取り込んで利用することができます。&lt;/p&gt;

&lt;h2&gt;3. 本番環境に Apex クラスをアップロードする&lt;/h2&gt;

&lt;p&gt;[設定] 画面より、 リリース &amp;gt; 送信変更セット 画面を表示し、 新規 ボタンをクリックして、新しい変更セットを作成します。&lt;/p&gt;

&lt;p&gt;変更セットコンポーネント セクションにある、 追加 ボタンより、資材選択画面を表示、Apex クラス TSTimeTableAPIController, TSTimeTableAPIControllerTest を選択し、 変更セットに追加 ボタンをクリックします。&lt;/p&gt;&lt;p&gt;変更セットコンポーネント セクションに、選択した Apex クラスが表示されていることを確認したら、 アップロード ボタンをクリック、次の画面で 対象組織 から 本番 を選択し アップロード ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;しばらくすると、変更セットのアップロードが成功した旨のメールが届きます。&lt;/p&gt;

&lt;p&gt;TeamSpirit 本番環境の [設定] 画面より リリース &amp;gt; 受信変更セット 画面を表示し、 リリース待ちの変更セット セクションより、該当の変更セットを選択、リリース ボタンをクリックし、次の画面の テストオプションの選択 から デフォルト を選択、 リリース ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;反映が終わると、 [設定] 画面より、 開発 &amp;gt; Apex クラス に TSTimeTableAPIController, TSTimeTableAPIControllerTest が追加されます。&lt;/p&gt;

&lt;p&gt;TSTimeTableAPIController を選択し、 セキュリティー ボタンをクリック、 有効にされたプロファイル に全てのプロファイルを追加し、保存してください。&lt;/p&gt;

&lt;h2&gt;4. Force.com 接続アプリケーション を作成する&lt;/h2&gt;

&lt;p&gt;TeamSpirit 本番環境の [設定] 画面より、 ビルド &amp;gt; 作成 &amp;gt; アプリケーション 画面を表示し、 接続アプリケーション セクションの 新規 ボタンをクリック、 新規接続アプリケーション 画面を表示します。&lt;/p&gt;&lt;p&gt;基本情報 セクション内 接続アプリケーション名 , API 参照名 , 取引先責任者 メール は任意の内容を入力します。&lt;/p&gt;&lt;p&gt;API (OAuth 設定の有効化) セクション内 OAuth 設定の有効化 チェックボックスをオンにし、入力項目を展開します。&lt;/p&gt;

&lt;p&gt;コールバック URL は、後述のアプリケーションデプロイ先を URL を元に、 https://{ホスト名}/oauth/salesforce/callback の形式で入力します。&lt;/p&gt;

&lt;p&gt;選択した OAuth 範囲 は、 フルアクセス (full) , ユーザに代わっていつでも要求を実行 (refresh_token, offline_access) を選択します。&lt;/p&gt;

&lt;p&gt;上記を入力した上、保存ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;アプリケーション詳細画面に遷移するので、 API (OAuth 設定の有効化) セクションより、 コンシューマ鍵 , コンシューマの秘密 の内容をテキストファイルなどに保存しておきます。&lt;/p&gt;

&lt;h2&gt;5. Slack でアプリケーションを作成する&lt;/h2&gt;

&lt;p&gt;Slack の API サイトを開き、 Create New App ボタンをクリック、 App Name と Developer Slack Workspace を入力し、Slack アプリケーションを作成します。&lt;/p&gt;

&lt;p&gt;Add features and functionality のセクション内にある、 Slash Commands と Interactive Components を設定します。&lt;/p&gt;

 Slash Commands 

&lt;p&gt;Slash Commands 画面より、 Create New Command ボタンをクリック、新規作成画面で以下のように入力します。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Command: /ts
&lt;/li&gt;&lt;li&gt;Request URL: https://{ホスト名}/hooks/slash
&lt;/li&gt;&lt;li&gt;Short Description (任意): 例: TeamSpirit で打刻します
&lt;/li&gt;&lt;/ul&gt;

 Interactive Components &lt;p&gt;Interactive Components 画面で、 Enable Interactive Components ボタンをクリック、 Request URL に https://{ホスト名}/hooks/interactive のフォーマットで URL を入力し、緑の Enable Interactive Components ボタンをクリックし、保存します。&lt;/p&gt;

 アプリケーションをインストール 

&lt;p&gt;Install your app to your workspace セクションを展開し、 Install App to Workspace ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;App Credentials より、 Verification Token をコピーし、先程コンシューマー鍵を保存したテキストファイルに貼り付け、保存します。&lt;/p&gt;

&lt;h2&gt;6. アプリケーションをデプロイする&lt;/h2&gt;

&lt;p&gt;ここでは Heroku を使ってホスティングする例を記載します。&lt;/p&gt;

&lt;p&gt;GitHub リポジトリ の README 内にある、 Deploy to Heroku ボタンをクリックし、Heroku のアプリケーション設定を入力画面を開きます。&lt;/p&gt;

&lt;p&gt;Config Variables セクション内の環境変数欄にこれまでテキストファイルに保存していた情報を入力します。&lt;/p&gt;

&lt;p&gt;以上で設定は完了です。&lt;/p&gt;

&lt;p&gt;お使いの Slack ワークスペースで /ts コマンドを実行してみてください。&lt;/p&gt;

&lt;p&gt;導入でお困りのことがありましたら、連絡先 か Twitter などでお気軽にお問い合わせください。&lt;/p&gt;

&lt;p&gt;バグ報告は GitHub Issues に起票頂けると幸いです。&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
