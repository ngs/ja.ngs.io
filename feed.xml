<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Atsushi Nagase</title>
  <subtitle>プログラミング、ガジェット、電子工作、ロードバイク、ランニング、旅行など、趣味や仕事のことを書き綴るブログ。</subtitle>
  <id>https://ja.ngs.io/</id>
  <link href="https://ja.ngs.io/"/>
  <link href="https://ja.ngs.io/feed.xml" rel="self"/>
  <updated>2018-12-30T15:00:00Z</updated>
  <author>
    <name>長瀬 敦史</name>
  </author>
  <entry>
    <title>2018年所感</title>
    <link rel="alternate" href="https://ja.ngs.io/2018/12/31/shokan2018/"/>
    <id>https://ja.ngs.io/2018/12/31/shokan2018/</id>
    <published>2018-12-30T15:00:00Z</published>
    <updated>2018-12-31T02:17:46+00:00</updated>
    <author>
      <name>長瀬 敦史</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/2018-12-31-shokan2018/main.jpg" alt="Main" /&gt;&lt;/p&gt;

&lt;p&gt;今年は、母方の祖母が住む、尾道で家族と大晦日を迎えています。&lt;/p&gt;

&lt;p&gt;&lt;a href="/t/所感/"&gt;例年&lt;/a&gt; にならい、2018年の所感と2019年に注力することなどを書いていこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="part-8d188b43bc35966f"&gt;仕事・技術&lt;/h2&gt;

&lt;p&gt;初旬は、ずいぶん前のことの様に感じますが、昨年入社した CAMPFIRE でシステムリプレイスの実装、金融事業での監査対応、ISMS 取得担当として活動していました。&lt;/p&gt;

&lt;p&gt;去年注力してきた業務が落ち着き、メインのプロダクト開発を離れ、時間ができたので、OSS で公開しているアプリや、ライブラリのメンテナンス、ネットワーキングに時間を使っていました。&lt;/p&gt;

&lt;p&gt;そして、夏頃から、同時に複数の面白いお声がけをいただき、その中のいくつかのプロジェクトが現在も推進中です。&lt;/p&gt;

&lt;p&gt;まだ、いずれも、対外的に発表できる段階ではないので、良き頃合いに、お伝えしていこうと思います。&lt;/p&gt;

&lt;p&gt;個人で開発しているアプリやライブラリについては、引き続き、年 1, 2個ぐらいは、新しいものをリリースするなり、メジャーアップデートをしていこうと思います。&lt;/p&gt;

&lt;h2 id="part-a02cefe780725adf"&gt;旅行・釣り&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-12-31-shokan2018/trout.jpg" alt="Trout" /&gt;&lt;/p&gt;

&lt;p&gt;今まで、防波堤や船など、主に海に友人と連れ立って釣行することが多かったのですが、今年はフライフィッシングに入門し、毛鉤を巻いたり、一人で沢へ釣行をしました。&lt;/p&gt;

&lt;p&gt;まだまだ思うようにキャスティングができず、然るべき毛鉤の選択もできていないと思うので、精進します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;02/10-11 &lt;a href="http://katuuraonsen.com/"&gt;勝浦つるんつるん温泉&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;04/14-15 &lt;a href="https://inside.campfire.co.jp/updates/2018/04/17/takibicamp1/"&gt;たきび合宿 at 伊東温泉 山喜旅館&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;05/03-06 親戚宅 @ 能登
&lt;/li&gt;&lt;li&gt;05/20 千葉県勝山港
&lt;/li&gt;&lt;li&gt;06/09-10 &lt;a href="http://www.camp-miyahara.com/"&gt;宮原オートキャンプ場&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;07/14-16 &lt;a href="http://w2.avis.ne.jp/~mawarime/fureai.htm"&gt;千曲源流金峰ふれあいの森&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;09/15-16 &lt;a href="http://yozawa.jp/"&gt;養沢毛鉤専用釣場&lt;/a&gt; + &lt;a href="http://otakecamp.web.fc2.com/"&gt;大岳キャンプ場&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;10/27-28 &lt;a href="http://shalomnet.net/"&gt;シャロムの森&lt;/a&gt; + &lt;a href="https://www.kurozakaishi.com/"&gt;黒坂石バンガローテント村&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;11/10 &lt;a href="日帰り"&gt;養沢毛鉤専用釣場&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;11/23-25 &lt;a href="https://tanukiko.com/"&gt;田貫湖キャンプ場&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;12/01-02 &lt;a href="http://yozawa.jp/"&gt;養沢毛鉤専用釣場&lt;/a&gt; + &lt;a href="http://otakecamp.web.fc2.com/"&gt;大岳キャンプ場&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="part-654330447a8"&gt;音楽&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-12-31-shokan2018/asagiri.jpg" alt="Asagiri" /&gt;&lt;/p&gt;

&lt;p&gt;9月後半から3週続けてフェスに参加するなど、積極的に音楽を消費できていたと思います。&lt;/p&gt;

&lt;p&gt;2019年もサボらず消費活動を行います。深夜営業のクラブとワンマンライブへの参加が少なかったので、来年はもう少し足を運びたい所存です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;01/06 &lt;a href="http://www.contacttokyo.com/schedule/shelter-japan-tour-2017/"&gt;SHELTER - Timmy Regisford JAPAN TOUR 2017-2018 at Contact Tokyo&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;03/30 &lt;a href="https://www.red-hot.ne.jp/play/detail.php?pid=py15763"&gt;くるりライブツアー 「線」at Zepp Tokyo&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;05/18 &lt;a href="http://www.contacttokyo.com/schedule/chaos-5/"&gt;Chaos at Contact Tokyo&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;06/02-03 &lt;a href="https://taicoclub.com/18/"&gt;Taicoclub at こだまの森&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;09/23 &lt;a href="http://kyotoonpaku.net/2018/"&gt;京都音楽博覧会 at 梅小路公園&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;09/29 &lt;a href="http://www.offtone.in/camp/"&gt;CAMP Off-Tone at マウントピア黒平&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;10/06-07 &lt;a href="http://asagirijam.jp/"&gt;朝霧 JAM at 富士山麓 朝霧アリーナ&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;11/02-03 &lt;a href="https://mutek.jp/"&gt;MUTEK.JP at 日本科学未来館&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;11/14 &lt;a href="http://mabanua.com/live/2018/tour2018_blurred/"&gt;mabanua tour 2018 - Blurred at 渋谷 WWW X&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;11/18 &lt;a href="http://mawinjapan.com/"&gt;MASTERS AT WORK in JAPAN at ageha Studio Coast&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="part-65427891726"&gt;健康&lt;/h2&gt;

&lt;p&gt;2018年の前半は、定時で CAMPFIRE に出社しており、ランニングで渋谷まで行き、ジムでシャワーを浴びてオフィスへ向かう生活をしていたのですが、リモート中心に切り替え、複数の職場を行き来するようになってからは、運動を習慣化できていませんでした。&lt;/p&gt;

&lt;p&gt;前述の通り、複数のプロジェクトが同時に走っており、生活習慣が不安定な日々を過ごしています。&lt;/p&gt;

&lt;p&gt;暖かくなるまでには、自分のキャパシティを考慮し、自分の担当業務を整理して、規則正しく、運動もスケジュールに含んだ生活に戻したいと思います。&lt;/p&gt;

&lt;h2 id="part-6542ac0b7da"&gt;家族&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-12-31-shokan2018/family.jpg" alt="Family" /&gt;&lt;/p&gt;

&lt;p&gt;長女が小学校5年生、長男が2年生、次女が幼稚園年少になりました。&lt;/p&gt;

&lt;p&gt;長女がプログラミング教室に通うようになり、まだ付き添いはしているものの、家から電車に乗って渋谷の教室まで自分で移動できるほどになり、コンピュータを使いこなすようになり、、日々成長の速さに驚いています。&lt;/p&gt;

&lt;p&gt;年々、自分自身と、於かれている環境の変化のスピードが早くなっており、年始では想像もつかなかった状況に年末になっています。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;今年一年はこのように過ごす&amp;rdquo; みたいなことを断言し難くなっていますが、引き続き、自分の趣味の音楽や旅行に家族を巻き込んで、一緒に過ごす時間を作っていきたいと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>macOS 環境のための CircleCI Orbs を公開しました</title>
    <link rel="alternate" href="https://ja.ngs.io/2018/12/25/circleci-orbs/"/>
    <id>https://ja.ngs.io/2018/12/25/circleci-orbs/</id>
    <published>2018-12-24T15:00:00Z</published>
    <updated>2018-12-31T02:17:46+00:00</updated>
    <author>
      <name>長瀬 敦史</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/2018-12-25-circleci-orbs/main.jpg" alt="Main" /&gt;&lt;/p&gt;

&lt;p&gt;この記事 &lt;a href="https://qiita.com/advent-calendar/2018/circleci"&gt;CircleCI Advent Calendar 2018&lt;/a&gt; の25日目の投稿です。&lt;/p&gt;

&lt;h2 id="tl-dr"&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;CircleCI での iOS アプリの開発に利用していた、設定を汎用化し、&lt;a href="https://circleci.com/orbs/registry/"&gt;CircleCI Orbs Registry&lt;/a&gt; に公開した、以下の Orbs の使い方と、開発のモチベーションについて記載します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/carthage"&gt;ngs/carthage&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/fastlane"&gt;ngs/fastlane&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/swiftlint"&gt;ngs/swiftlint&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/danger"&gt;ngs/danger&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;これらの Orbs のソースコードは、全て以下のリポジトリで管理しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ngs/circleci-orbs"&gt;ngs/circleci-orbs on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="part-3f5c9c4b97f391f7"&gt;モチベーション&lt;/h2&gt;

&lt;p&gt;2014年より、オープンソースで開発している iPhone, iPad, Apple Watch 向け CircleCI クライアント CI2Go は、もちろん、CircleCI の macOS 環境を利用して 継続的インテグレーション・デリバリー を行なっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://circleci.com/gh/ngs/ci2go"&gt;ngs/ci2go on CircleCI&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/ngs/ci2go"&gt;ngs/ci2go on GitHub&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://itunes.apple.com/app/id940028427?mt=8"&gt;App Store&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;バージョン 1 の時代は、CircleCI 1.0 でのビルド環境を使い、&lt;a href="https://fastlane.tools/"&gt;fastlane&lt;/a&gt; などの周辺ツールも、今ほど機能が豊富ではなかったので、色々試行錯誤してきました。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="/2015/03/24/circleci-ios/"&gt;iOS アプリの継続ビルドを CircleCI に変更した&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2017 年 に CircleCI 2.0 が発表され、同年11月 &lt;a href="https://circleci.com/blog/one-more-thing-apple-developers-can-now-build-for-macos-ios-tvos-and-watchos-on-circleci-2-0/"&gt;macOS サポート&lt;/a&gt;も開始しました。&lt;/p&gt;

&lt;p&gt;しばらく iOS 開発から離れた仕事をしていたので、指を加えて見ているだけでしたが、今年、しばらくメンテナンスが止まっていた CI2Go の CocoaPods での依存解決, Realm (オフラインサポート) を廃止し、バージョン 2.0 として Swift 4, Carthage を使い再構築を行いました。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="/2018/07/02/ci2go-v2/"&gt;CI2Go バージョン 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その当時の設定ファイルが、以下のようなものです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ngs/ci2go/blob/v2.0.0/.circleci/config.yml"&gt;.circleci/config.yml@v2.0.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Workflows を採用することで、ビルドプロセスの見通しがよくなり、fastlane の進化により、以前のような、証明書関連や、依存解決に関わるヤクの毛刈りはほとんどなくなりました。&lt;/p&gt;

&lt;p&gt;以降、いくつかのプロジェクトで、この CI2Go の CircleCI 設定をコピーして、他のプロジェクトで活用してきました。&lt;/p&gt;

&lt;p&gt;今年、11月に &lt;a href="https://circleci.com/blog/announcing-orbs-technology-partner-program/"&gt;CircleCI Orbs が、一般に利用可能になった&lt;/a&gt;ため、これらの設定を汎用化し、&lt;a href="https://circleci.com/orbs/registry/"&gt;CircleCI Orbs Registry&lt;/a&gt; に公開しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/carthage"&gt;ngs/carthage&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/fastlane"&gt;ngs/fastlane&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/swiftlint"&gt;ngs/swiftlint&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/danger"&gt;ngs/danger&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="part-2b928e1f00a686a1"&gt;利用方法&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ngs&lt;/code&gt; の名前空間で公開しているこれらの Orb は認証を得ていない、サードパーティですので、CircleCI 画面左側ナビゲーション &amp;gt; &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Security&lt;/em&gt; (&lt;code&gt;https://circleci.com/gh/organizations/{orgname}/settings#security&lt;/code&gt;)&lt;br&gt;
より、一つ目のラジオボタン &lt;code&gt;Yes, allow all members of my organization to publish dev orbs...&lt;/code&gt; を選択してください。&lt;/p&gt;

&lt;p&gt;また、プロジェクト設定 &amp;gt; &lt;em&gt;Build Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Advanced Settings&lt;/em&gt; の &lt;em&gt;Enable build processing (preview)&lt;/em&gt; &lt;code&gt;https://circleci.com/gh/{orgname}/{repo}/edit#advanced-settings&lt;/code&gt; がオフになっている場合は、そちらも On にしてください。&lt;/p&gt;

&lt;h3 id="carthage"&gt;Carthage&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/carthage"&gt;ngs/carthage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Carthage の依存解決を行います。&lt;/p&gt;

&lt;p&gt;デプロイメントターゲットを指定することにより、参照先とプロジェクトのデプロイメントターゲットの乖離による App Store Connect アップロード時のエラーを防ぎます。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="https://stackoverflow.com/a/52315766"&gt;Xcode 10 GM - Invalid Binary Architecture when submitting to App Store Connect?&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2.1&lt;/span&gt;
&lt;span class="na"&gt;orbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;carthage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ngs/carthage@0.0.2&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;macos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;xcode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;10.1.0&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;carthage/setup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;platforms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;iOS,watchOS&lt;/span&gt;
          &lt;span class="na"&gt;watch_os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.0'&lt;/span&gt;
          &lt;span class="na"&gt;iphone_os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;11.0'&lt;/span&gt;
          &lt;span class="na"&gt;cache_key_prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2-carthage-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fastlane"&gt;fastlane&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/fastlane"&gt;ngs/fastlane&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fastlane.tools/"&gt;fastlane&lt;/a&gt; コマンドと、依存する RubyGems の解決を行う Bundler コマンドを実行する、コマンド、実行に求められる環境変数が備わった Executor、単体の lane を実行するジョブを提供します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2.1&lt;/span&gt;
&lt;span class="na"&gt;orbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;fastlane&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ngs/fastlane@0.0.2&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build_and_deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fastlane/macos&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;fastlane/bundle-install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;fastlane/lane&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;run match --readonly --type adhoc&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;fastlane/lane&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_app_build&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;fastlane/lane&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_app_deploy&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build_and_deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build_and_deploy&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;fastlane/lane&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_single_lane&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="swiftlint-danger"&gt;SwiftLint, Danger&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://danger.systems/"&gt;Danger&lt;/a&gt; と &lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt; を実行するジョブを提供します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2.1&lt;/span&gt;
&lt;span class="na"&gt;orbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;swiftlint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ngs/swiftlint@0.0.1&lt;/span&gt;
  &lt;span class="na"&gt;danger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ngs/danger@0.0.1&lt;/span&gt;
&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build_and_deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;swiftlint/run&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;danger/run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="macos-orbs"&gt;macOS 関連以外の Orbs&lt;/h2&gt;

&lt;p&gt;macOS 関連以外の業務に関わる Orb も公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/clamav"&gt;ngs/clamav&lt;/a&gt; : コンテナ内のファイルに対して &lt;a href="https://www.clamav.net/"&gt;ClamAV&lt;/a&gt; を使って、マルウェアが含まれていないか検査します
&lt;/li&gt;&lt;li&gt;&lt;a href="https://circleci.com/orbs/registry/orb/ngs/dotnet"&gt;ngs/dotnet&lt;/a&gt; : .NET Core 向けに開発されたプロジェクトを &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/"&gt;.NET CLI&lt;/a&gt; を使い操作します。
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;今回紹介した、macOS 向けのものも含めて、公開している Orbs は、まだ様々なユースケースに対応できているとは言えません。&lt;/p&gt;

&lt;p&gt;是非、活用いただき、&lt;a href="https://github.com/ngs/circleci-orbs/issues"&gt;GitHub Issues&lt;/a&gt; でフィードバックをいただけたらと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CI2Go Today ウィジェット対応</title>
    <link rel="alternate" href="https://ja.ngs.io/2018/07/08/ci2go/"/>
    <id>https://ja.ngs.io/2018/07/08/ci2go/</id>
    <published>2018-07-08T00:00:00Z</published>
    <updated>2018-12-31T02:17:46+00:00</updated>
    <author>
      <name>長瀬 敦史</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/2018-07-08-ci2go/main.jpg" alt="Main" /&gt;&lt;/p&gt;

&lt;p&gt;iPhone と iPad 向け &lt;a href="https://circleci.com"&gt;CircleCI&lt;/a&gt; クライアント  &lt;a href="https://itunes.apple.com/app/id940028427?mt=8"&gt;CI2Go&lt;/a&gt; バージョン 2.1.0 を公開しました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://itunes.apple.com/app/id940028427?mt=8"&gt;&lt;img src="/images/appstore-5eb1a238.svg" alt="Appstore" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;バージョン 2.1.0 は以下の更新を含みます:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Today ウィジェット
&lt;/li&gt;&lt;li&gt;SSH 接続
&lt;/li&gt;&lt;li&gt;端末上の成果物を削除
&lt;/li&gt;&lt;li&gt;URL でアプリを開く
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="today"&gt;Today ウィジェット&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-07-08-ci2go/widget.jpg" alt="Widget" /&gt;&lt;/p&gt;

&lt;p&gt;CI2Go Today ウィジェットを &lt;a href="https://support.apple.com/ja-jp/ht207122"&gt;Today&lt;/a&gt; ビューに追加できます。&lt;/p&gt;

&lt;p&gt;選択したプロジェクト、ブランチ、または全てのフォローしているプロジェクトの直近5件のビルドが表示されます。&lt;/p&gt;

&lt;h2 id="ssh"&gt;SSH 接続&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-07-08-ci2go/ssh.png" alt="Ssh" /&gt;&lt;/p&gt;

&lt;p&gt;SSH 接続が有効なビルドの実行中で Panic の &lt;a href="https://panic.com/prompt/"&gt;Prompt&lt;/a&gt; のような &lt;code&gt;ssh://&lt;/code&gt; URI スキームに対応しているクライアントがインストールされている場合、&lt;code&gt;SSH&lt;/code&gt; セクションが表示されるようになりました。&lt;/p&gt;

&lt;p&gt;コンテナの行を選択することで、SSH クライアントを起動します。&lt;/p&gt;

&lt;h2 id="part-5a41d66314e34257"&gt;端末上の成果物を削除&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-07-08-ci2go/artifacts.png" alt="Artifacts" /&gt;&lt;/p&gt;

&lt;p&gt;テーブルの行を左にスワイプして出てくるゴミ箱アイコンから、ダウンロード済のビルド成果物を削除できます。&lt;/p&gt;

&lt;h2 id="url"&gt;URL でアプリを開く&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;chttps://&lt;/code&gt;, &lt;code&gt;ci2go://&lt;/code&gt;, &lt;code&gt;ci2go+https://&lt;/code&gt; の URI スキームに対応しました。&lt;/p&gt;

&lt;p&gt;CircleCI のビルド URL のプロトコル部分を以下のように変更することで、CI2Go を起動できます。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://circleci.com/gh/circleci/frontend/3439"&gt;https://circleci.com/gh/circleci/frontend/3439&lt;/a&gt; から &lt;a href="ci2go://circleci.com/gh/circleci/frontend/3439"&gt;ci2go://circleci.com/gh/circleci/frontend/3439&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不具合などありましたら、 &lt;a href="https://github.com/ngs/ci2go/issues/new"&gt;イシュー&lt;/a&gt; を起票いただけると幸いです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Coveralls fastlane プラグイン</title>
    <link rel="alternate" href="https://ja.ngs.io/2018/07/07/fastlane-plugin-coveralls/"/>
    <id>https://ja.ngs.io/2018/07/07/fastlane-plugin-coveralls/</id>
    <published>2018-07-07T14:59:00Z</published>
    <updated>2018-12-31T02:17:46+00:00</updated>
    <author>
      <name>長瀬 敦史</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/2018-07-07-fastlane-plugin-coveralls/main.png" alt="Main" /&gt;&lt;/p&gt;

&lt;p&gt;Xcode のテストカバレッジを &lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt; へアップロードする &lt;a href="https://fastlane.tools/"&gt;fastlane&lt;/a&gt;&amp;nbsp;&lt;a href="https://github.com/ngs/fastlane-plugin-coveralls"&gt;プラグイン&lt;/a&gt; と、その依存先で、単体でもコマンドラインツールとして利用できる &lt;a href="https://github.com/ngs/xccoveralls"&gt;xccoveralls&lt;/a&gt; を公開しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ngs/fastlane-plugin-coveralls"&gt;ngs/fastlane-plugin-coveralls&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/ngs/xccoveralls"&gt;ngs/xccoveralls&lt;/a&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="part-4f0872ac8628f1a9"&gt;使ってみる&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;fastlane add_plugin coveralls&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Fastfile&lt;/code&gt; に以下の行を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;lane&lt;/span&gt; &lt;span class="ss"&gt;:send_coveralls&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;coveralls&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テストターゲットの &lt;code&gt;Code Coverage&lt;/code&gt;　のチェックボックスをオンに設定し&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018-07-07-fastlane-plugin-coveralls/checkbox.png" alt="Checkbox" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fastlane&lt;/code&gt; コマンドよりコードカバレッジを送信できます&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;XCCOVERALLS_REPO_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;... &lt;span class="c"&gt;# Coveralls.io から自分のものを取ってくる&lt;/span&gt;
bundle &lt;span class="nb"&gt;exec &lt;/span&gt;fastlane send_coveralls&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例として &lt;a href="https://github.com/ngs/ci2go"&gt;CI2Go&lt;/a&gt; のカバレッジを &lt;a href="https://coveralls.io/github/ngs/ci2go"&gt;Coveralls&lt;/a&gt; で、その設定を&lt;a href="https://github.com/ngs/ci2go/blob/master/fastlane/Fastfile#L119-L124"&gt;Fastfile&lt;/a&gt; で確認いただけます。&lt;/p&gt;

&lt;h2 id="part-f6f3a1d624113ad7"&gt;開発のきっかけ&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.fastlane.tools/actions/xcov/"&gt;fastlane のアクション&lt;/a&gt; として組み込まれている &lt;a href="https://github.com/nakiostudio/xcov"&gt;Xcov&lt;/a&gt; を利用しようとしました。&lt;/p&gt;

&lt;p&gt;しかし、Xcov はカバレッジの要約のみ保持している &lt;code&gt;.xccovreport&lt;/code&gt; または &lt;code&gt;.xccoverage&lt;/code&gt; の情報を取得して送信しているため、カバー行の情報まで送信しません。&lt;/p&gt;

&lt;p&gt;そこで、Xcode 9.3 より提供されている &lt;code&gt;xcrun xccov&lt;/code&gt; を利用して、新たにこのツールを実装しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ファイルの一覧を取得する&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;xcrun xccov view &lt;span class="nt"&gt;--file-list&lt;/span&gt; DerivedData/Logs/Build/&lt;span class="k"&gt;*&lt;/span&gt;.xccovarchive
&lt;span class="c"&gt;# 特定のファイルのカバレッジを取得する&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;xcrun xccov view &lt;span class="nt"&gt;--file&lt;/span&gt; /Users/ngs/src/CI2Go/AppDelegate.swift &lt;span class="se"&gt;\&lt;/span&gt;
    DerivedData/Logs/Build/&lt;span class="k"&gt;*&lt;/span&gt;.xccovarchive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参照: &lt;a href="https://medium.com/xcblog/xccov-xcode-code-coverage-report-for-humans-466a4865aa18"&gt;xccov: Xcode Code Coverage Report for Humans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もし何か問題がありましたら &lt;a href="https://github.com/ngs/fastlane-plugin-coveralls/issues"&gt;イシュー&lt;/a&gt; を起票いだたけると嬉しいです。&lt;/p&gt;

&lt;p&gt;では XCTesting を楽しんでください &lt;img alt="computer" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4bb.png?v5" style="width: 1em; vertical-align:middle" class="gemoji"&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CI2Go バージョン 2</title>
    <link rel="alternate" href="https://ja.ngs.io/2018/07/02/ci2go-v2/"/>
    <id>https://ja.ngs.io/2018/07/02/ci2go-v2/</id>
    <published>2018-07-02T00:20:00Z</published>
    <updated>2018-12-31T02:17:46+00:00</updated>
    <author>
      <name>長瀬 敦史</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/2018-07-02-ci2go-v2/main.png" alt="Main" /&gt;&lt;/p&gt;

&lt;p&gt;iPhone と iPad 向け &lt;a href="https://circleci.com"&gt;CircleCI&lt;/a&gt; クライアント  &lt;a href="https://itunes.apple.com/app/id940028427?mt=8"&gt;CI2Go&lt;/a&gt; のメジャーバージョンアップを行いました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://itunes.apple.com/app/id940028427?mt=8"&gt;&lt;img src="/images/appstore-5eb1a238.svg" alt="Appstore" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;バージョン 2 は以下のアップデートを含んでいます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="iphone-x"&gt;iPhone X に最適化&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-07-02-ci2go-v2/iphonex.png" alt="Iphonex" /&gt;&lt;/p&gt;

&lt;p&gt;iPhone X の 5.8 インチのスクリーンに最適化しました。&lt;/p&gt;

&lt;h2 id="part-85572a1f0b5a2864"&gt;シングルサインオン&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-07-02-ci2go-v2/sso.gif" alt="Sso" /&gt;&lt;/p&gt;

&lt;p&gt;API トークンを CircleCI の画面からコピーしてくる代わりに、シングルサインオンを利用するよう、認証フローを刷新しました。&lt;/p&gt;

&lt;p&gt;内部で自動的に &lt;a href="https://circleci.com/docs/2.0/managing-api-tokens/"&gt;個人 API トークン&lt;/a&gt; を作成します。&lt;/p&gt;

&lt;h2 id="part-c517b01033295148"&gt;ビルド成果物 ブラウザー&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-07-02-ci2go-v2/artifacts.gif" alt="Artifacts" /&gt;&lt;/p&gt;

&lt;p&gt;ビルド成果物 ブラウザー を再構築しました。&lt;/p&gt;

&lt;p&gt;全てのファイルのダウンロードを待つことなく、素早く成果物を確認できます。&lt;/p&gt;

&lt;p&gt;必要な時にだけ、ファイルのダウンロードを開始し、画面を離れてもバックグラウンドでダウンロードを続けます。&lt;/p&gt;

&lt;h2 id="apple-watch"&gt;Apple Watch コンプリケーション&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-07-02-ci2go-v2/watch.png" alt="Watch" /&gt;&lt;/p&gt;

&lt;p&gt;Apple Watch &lt;a href="https://support.apple.com/ja-jp/ht205536"&gt;コンプリケーション&lt;/a&gt; の提供を開始しました。&lt;/p&gt;

&lt;p&gt;時計の文字盤でビルドのステータスを確認できます。&lt;/p&gt;

&lt;p&gt;watchOS API の制約により、リアルタイムな情報の更新は行いません。&lt;/p&gt;

&lt;h2 id="part-26fbbe6ffdd926f4"&gt;パフォーマンス改善&lt;/h2&gt;

&lt;p&gt;このバージョンで、全ての実装を一からみなおしました。&lt;/p&gt;

&lt;p&gt;オフラインデータの扱いを行わなくなった代わりに、より素早い挙動を行いようになりました。&lt;/p&gt;

&lt;p&gt;不具合などありましたら、 &lt;a href="https://github.com/ngs/ci2go/issues/new"&gt;イシュー&lt;/a&gt; を起票いただけると幸いです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Slack のコマンドを使って TeamSpirit に打刻する</title>
    <link rel="alternate" href="https://ja.ngs.io/2018/02/14/ts-dakoku/"/>
    <id>https://ja.ngs.io/2018/02/14/ts-dakoku/</id>
    <published>2018-02-14T11:00:00Z</published>
    <updated>2018-12-31T02:17:46+00:00</updated>
    <author>
      <name>長瀬 敦史</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/screen.gif" alt="Screen" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://campfire.co.jp"&gt;CAMPFIRE&lt;/a&gt; の従業員は、勤怠・経費・工数などの管理を &lt;a href="https://www.teamspirit.co.jp"&gt;TeamSpirit&lt;/a&gt; を使って行っています。&lt;/p&gt;

&lt;p&gt;勤怠情報は SalesForce &lt;a href="https://developer.salesforce.com/platform/force.com"&gt;Force.com&lt;/a&gt; 上にインストールされた TeamSpirit の勤怠管理画面などから行います。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="https://www.teamspirit.co.jp/blog/staff/2013/07/teamspirit-forcecom.html"&gt;【利用環境・機能】知っていると得をする！チームスピリットと Force.com との関係を理解しよう！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;勤怠情報は、毎日リアルタイムに付けないと、月末にまとめて、過去を振り返って記入する必要があり、従業員に負荷がかかっています。&lt;/p&gt;

&lt;p&gt;この打刻作業を毎日習慣づけて、負荷なく行うため、いつも使っている Slack のコマンドで行える、Slack のアプリケーションを作成しました。&lt;/p&gt;

&lt;p&gt;ソースコードは GitHub 上で公開しています。&lt;/p&gt;

&lt;p&gt;TeamSpirit と Slack を利用している企業であれば、Heroku などを使ってアプリケーションを立ち上げ、全ての従業員が利用できます。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="https://github.com/ngs/ts-dakoku"&gt;ngs/ts-dakoku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下に導入手順を記載します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="part-6542a60cf6e"&gt;手順&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;TeamSpirit が動く Force.com 環境から Sandbox 環境を作成する
&lt;/li&gt;&lt;li&gt;Sandbox に Apex のソースコードを追加する
&lt;/li&gt;&lt;li&gt;Sandbox より、送信変更セットを使い、Apex コードを本番環境にアップロードする
&lt;/li&gt;&lt;li&gt;TeamSpirit 本番環境で &lt;em&gt;接続アプリケーション&lt;/em&gt; を作成する
&lt;/li&gt;&lt;li&gt;Slack でアプリケーションを作成する
&lt;/li&gt;&lt;li&gt;アプリケーションを Heroku 上にデプロイする
&lt;/li&gt;&lt;/ol&gt;

&lt;h2 id="1-force-com-sandbox"&gt;1. Force.com Sandbox 環境を作成する&lt;/h2&gt;

&lt;p&gt;TeamSpirit は外部に公開されている API がありません。&lt;/p&gt;

&lt;p&gt;そこで、Force.com に Apex REST のエンドポイントを作成します。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="https://developer.salesforce.com/page/Creating_REST_APIs_using_Apex_REST"&gt;Creating REST APIs using Apex REST&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TeamSpirit が動いている本番環境の Force.com では、Apex クラス、トリガーなどの開発資材を直接作成することはできません。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[設定]&lt;/em&gt; 画面より、 &lt;em&gt;リリース&lt;/em&gt; &amp;gt; &lt;em&gt;Sandbox&lt;/em&gt; 画面を表示し、 &lt;em&gt;新規 Sandbox&lt;/em&gt; ボタンをクリックして、Sandbox 環境を作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/01-create-sandbox.gif" alt="01 create sandbox" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;名前&lt;/em&gt; と &lt;em&gt;説明&lt;/em&gt; 欄には &lt;strong&gt;任意の内容&lt;/strong&gt; を入力し、 &lt;em&gt;Sandbox ライセンス&lt;/em&gt; は &lt;strong&gt;Developer&lt;/strong&gt; を選択します。&lt;/p&gt;

&lt;p&gt;次にでてくる、 &lt;em&gt;Sandbox オプション&lt;/em&gt; の &lt;em&gt;Apex クラス&lt;/em&gt; は空欄のまま、 &lt;em&gt;作成ボタン&lt;/em&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;しばらくすると、Sandbox 環境の使用準備が整った旨のメールが届きます。&lt;/p&gt;

&lt;p&gt;メールに記載されているログイン URL を開き、ログインユーザ名の欄に、TeamSpirit のログインメールアドレスの末尾に小文字で Sandbox 環境名、パスワードは TeamSpirit と同じものを入力し、ログインします。&lt;/p&gt;

&lt;h2 id="2-sandbox-apex"&gt;2. Sandbox に Apex のソースコードを追加する&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/02-sf-usernav.gif" alt="02 sf usernav" /&gt;&lt;/p&gt;

&lt;p&gt;Sandbox 環境画面右上にある、ログインユーザーの名前をクリックし、ナビゲーションを展開、 &lt;em&gt;開発コンソール&lt;/em&gt; を開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/03-sf-devconsole-file-menu.gif" alt="03 sf devconsole file menu" /&gt;&lt;/p&gt;

&lt;p&gt;管理コンソール左上メニューバーから &lt;em&gt;File&lt;/em&gt; &amp;gt; &lt;em&gt;New&lt;/em&gt; &amp;gt; &lt;em&gt;Apex Class&lt;/em&gt; を選択し、 &lt;code&gt;TSTimeTableAPIController&lt;/code&gt;, &lt;code&gt;TSTimeTableAPIControllerTest&lt;/code&gt; という名前の Apex クラスを作成します。&lt;/p&gt;

&lt;p&gt;コードエディター上に、それぞれリポジトリからコピーしたソースコードを貼り付け、保存します。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ngs/ts-dakoku/tree/master/apex/src/classes"&gt;ts-dakoku/apex/src/classes at master · ngs/ts-dakoku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;リポジトリ内の &lt;code&gt;apex&lt;/code&gt; ディレクトリは &lt;a href="https://developer.salesforce.com/page/Force.com_IDE"&gt;Force.com IDE&lt;/a&gt; のプロジェクトとしても取り込んで利用することができます。&lt;/p&gt;

&lt;h2 id="3-apex"&gt;3. 本番環境に Apex クラスをアップロードする&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;[設定]&lt;/em&gt; 画面より、 &lt;em&gt;リリース&lt;/em&gt; &amp;gt; &lt;em&gt;送信変更セット&lt;/em&gt; 画面を表示し、 &lt;em&gt;新規&lt;/em&gt; ボタンをクリックして、新しい変更セットを作成します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;変更セットコンポーネント&lt;/em&gt; セクションにある、 &lt;em&gt;追加&lt;/em&gt; ボタンより、資材選択画面を表示、Apex クラス &lt;code&gt;TSTimeTableAPIController&lt;/code&gt;, &lt;code&gt;TSTimeTableAPIControllerTest&lt;/code&gt; を選択し、 &lt;em&gt;変更セットに追加&lt;/em&gt; ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/04-sf-changeset.gif" alt="04 sf changeset" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;変更セットコンポーネント&lt;/em&gt; セクションに、選択した Apex クラスが表示されていることを確認したら、 &lt;em&gt;アップロード&lt;/em&gt; ボタンをクリック、次の画面で &lt;em&gt;対象組織&lt;/em&gt; から &lt;em&gt;本番&lt;/em&gt; を選択し &lt;em&gt;アップロード&lt;/em&gt; ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;しばらくすると、変更セットのアップロードが成功した旨のメールが届きます。&lt;/p&gt;

&lt;p&gt;TeamSpirit 本番環境の &lt;em&gt;[設定]&lt;/em&gt; 画面より &lt;em&gt;リリース&lt;/em&gt; &amp;gt; &lt;em&gt;受信変更セット&lt;/em&gt; 画面を表示し、 &lt;em&gt;リリース待ちの変更セット&lt;/em&gt; セクションより、該当の変更セットを選択、&lt;em&gt;リリース&lt;/em&gt; ボタンをクリックし、次の画面の &lt;em&gt;テストオプションの選択&lt;/em&gt; から &lt;em&gt;デフォルト&lt;/em&gt; を選択、 &lt;em&gt;リリース&lt;/em&gt; ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;反映が終わると、 &lt;em&gt;[設定]&lt;/em&gt; 画面より、 &lt;em&gt;開発&lt;/em&gt; &amp;gt; &lt;em&gt;Apex クラス&lt;/em&gt; に &lt;code&gt;TSTimeTableAPIController&lt;/code&gt;, &lt;code&gt;TSTimeTableAPIControllerTest&lt;/code&gt; が追加されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TSTimeTableAPIController&lt;/code&gt; を選択し、 &lt;em&gt;セキュリティー&lt;/em&gt; ボタンをクリック、 &lt;em&gt;有効にされたプロファイル&lt;/em&gt; に全てのプロファイルを追加し、保存してください。&lt;/p&gt;

&lt;h2 id="4-force-com"&gt;4. Force.com &lt;em&gt;接続アプリケーション&lt;/em&gt; を作成する&lt;/h2&gt;

&lt;p&gt;TeamSpirit 本番環境の &lt;em&gt;[設定]&lt;/em&gt; 画面より、 &lt;em&gt;ビルド&lt;/em&gt; &amp;gt; &lt;em&gt;作成&lt;/em&gt; &amp;gt; &lt;em&gt;アプリケーション&lt;/em&gt; 画面を表示し、 &lt;em&gt;接続アプリケーション&lt;/em&gt; セクションの &lt;em&gt;新規&lt;/em&gt; ボタンをクリック、 &lt;em&gt;新規接続アプリケーション&lt;/em&gt; 画面を表示します。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/05-sf-app-basic-info.gif" alt="05 sf app basic info" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;基本情報&lt;/em&gt; セクション内 &lt;em&gt;接続アプリケーション名&lt;/em&gt; , &lt;em&gt;API 参照名&lt;/em&gt; , &lt;em&gt;取引先責任者 メール&lt;/em&gt; は任意の内容を入力します。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/06-sf-app-oauth.gif" alt="06 sf app oauth" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;API (OAuth 設定の有効化)&lt;/em&gt; セクション内 &lt;em&gt;OAuth 設定の有効化&lt;/em&gt; チェックボックスをオンにし、入力項目を展開します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;コールバック URL&lt;/em&gt; は、後述のアプリケーションデプロイ先を URL を元に、 &lt;code&gt;https://{ホスト名}/oauth/salesforce/callback&lt;/code&gt; の形式で入力します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;選択した OAuth 範囲&lt;/em&gt; は、 &lt;em&gt;フルアクセス (full)&lt;/em&gt; , &lt;em&gt;ユーザに代わっていつでも要求を実行 (refresh_token, offline_access)&lt;/em&gt; を選択します。&lt;/p&gt;

&lt;p&gt;上記を入力した上、保存ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;アプリケーション詳細画面に遷移するので、 &lt;em&gt;API (OAuth 設定の有効化)&lt;/em&gt; セクションより、 &lt;em&gt;コンシューマ鍵&lt;/em&gt; , &lt;em&gt;コンシューマの秘密&lt;/em&gt; の内容をテキストファイルなどに保存しておきます。&lt;/p&gt;

&lt;h2 id="5-slack"&gt;5. Slack でアプリケーションを作成する&lt;/h2&gt;

&lt;p&gt;Slack の API サイトを開き、 &lt;em&gt;Create New App&lt;/em&gt; ボタンをクリック、 &lt;em&gt;App Name&lt;/em&gt; と &lt;em&gt;Developer Slack Workspace&lt;/em&gt; を入力し、Slack アプリケーションを作成します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Add features and functionality&lt;/em&gt; のセクション内にある、 &lt;em&gt;Slash Commands&lt;/em&gt; と &lt;em&gt;Interactive Components&lt;/em&gt; を設定します。&lt;/p&gt;

&lt;h3 id="slash-commands"&gt;Slash Commands&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Slash Commands&lt;/em&gt; 画面より、 &lt;em&gt;Create New Command&lt;/em&gt; ボタンをクリック、新規作成画面で以下のように入力します。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/07-slack-slash-command.gif" alt="07 slack slash command" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Command: &lt;code&gt;/ts&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;Request URL: &lt;code&gt;https://{ホスト名}/hooks/slash&lt;/code&gt;
&lt;/li&gt;&lt;li&gt;Short Description (任意): 例: &lt;code&gt;TeamSpirit で打刻します&lt;/code&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="interactive-components"&gt;Interactive Components&lt;/h3&gt;

&lt;p&gt;&lt;img src="/images/2018-02-14-ts-dakoku/08-slack-interactive-components.gif" alt="08 slack interactive components" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Interactive Components&lt;/em&gt; 画面で、 &lt;em&gt;Enable Interactive Components&lt;/em&gt; ボタンをクリック、 &lt;em&gt;Request URL&lt;/em&gt; に &lt;code&gt;https://{ホスト名}/hooks/interactive&lt;/code&gt; のフォーマットで URL を入力し、緑の &lt;em&gt;Enable Interactive Components&lt;/em&gt; ボタンをクリックし、保存します。&lt;/p&gt;

&lt;h3 id="part-81dfe9cbbd324acb"&gt;アプリケーションをインストール&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Install your app to your workspace&lt;/em&gt; セクションを展開し、 &lt;em&gt;Install App to Workspace&lt;/em&gt; ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App Credentials&lt;/em&gt; より、 &lt;em&gt;Verification Token&lt;/em&gt; をコピーし、先程コンシューマー鍵を保存したテキストファイルに貼り付け、保存します。&lt;/p&gt;

&lt;h2 id="6"&gt;6. アプリケーションをデプロイする&lt;/h2&gt;

&lt;p&gt;ここでは Heroku を使ってホスティングする例を記載します。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ngs/ts-dakoku"&gt;GitHub リポジトリ&lt;/a&gt; の README 内にある、 &lt;em&gt;Deploy to Heroku&lt;/em&gt; ボタンをクリックし、Heroku のアプリケーション設定を入力画面を開きます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Config Variables&lt;/em&gt; セクション内の環境変数欄にこれまでテキストファイルに保存していた情報を入力します。&lt;/p&gt;

&lt;p&gt;以上で設定は完了です。&lt;/p&gt;

&lt;p&gt;お使いの Slack ワークスペースで &lt;code&gt;/ts&lt;/code&gt; コマンドを実行してみてください。&lt;/p&gt;

&lt;p&gt;導入でお困りのことがありましたら、&lt;a href="/about/#contact"&gt;連絡先&lt;/a&gt; か &lt;a href="https://twitter.com/ngs"&gt;Twitter&lt;/a&gt; などでお気軽にお問い合わせください。&lt;/p&gt;

&lt;p&gt;バグ報告は &lt;a href="https://github.com/ngs/ts-dakoku/issues"&gt;GitHub Issues&lt;/a&gt; に起票頂けると幸いです。&lt;/p&gt;
</content>
  </entry>
</feed>
